import {
    createAsyncThunk,
    createSlice
} from '@reduxjs/toolkit';
import ResultModel from "../../model/ResultModel";
import {ErrorModel} from "../../model/ErrorModel";
import HomeModel from "../../model/HomeModel";
import {BaseModel} from "../../model/BaseModel";
import {getHomeInfoAPI} from "../api/HomeAPI";
import {RootState} from "../store";

export interface HomeInfo extends BaseModel{
    home?:HomeModel
}
const initialState:HomeInfo = {
    status:'loading'
};


export const getHomeInfo = createAsyncThunk<HomeModel, {}, ErrorModel>
(
    'home/getInfo',
    async ({}, {rejectWithValue}) => {
        try {
            return await getHomeInfoAPI();
        } catch (errorResult) {
            return rejectWithValue(errorResult);
        }
    },
);

export const homeSlice = createSlice({
    name: 'home',
    initialState,
    reducers: {
        // signOut: (state) => {
        // }
        getInfo:(state,payload)=>{
            console.log(state,payload)
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getHomeInfo.pending, (state, action) => {
                state.status = 'loading';
            })
            .addCase(getHomeInfo.fulfilled, (state, action) => {

                return {status:'error',home:action.payload};
            })
            .addCase(getHomeInfo.rejected, (state, action) => {
                state.status = 'error';
                state.errorMsg = action.payload?.msg;
            })
    },
});

export const selectHomeReducer = (state: RootState) => state.userReducer;

export const {} = homeSlice.actions;
export default homeSlice.reducer;
