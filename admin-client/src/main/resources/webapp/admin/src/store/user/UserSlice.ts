import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';
import {RootState, AppThunk} from '../store';
import loginAPI from "../../http/UserRestAPI";
import UserModel from "../../model/UserModel";

const initialState: UserModel = {
    status: 'signOut',
};

export const login = createAsyncThunk(
    'user/login',
    async (user: { username: string, password: string },{rejectWithValue}) => {
        try {
            const response = await loginAPI(user);
            console.log("payloadCreator",response);
            return response;
        }catch (error){
            console.log(error);
                return rejectWithValue(error);
        }

    },

);


export const userSlice = createSlice({
    name: 'user',
    initialState,
    reducers: {
        signOut: (state) => {
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(login.pending, (state,action) => {
                state.status = 'loading';
                console.log("pending",state,action);
            })
            .addCase(login.fulfilled, (state, action) => {
                state.status = 'loginIn';
                console.log("fulfilled",state,action);
            })
            .addCase(login.rejected, (state, action) => {
                state.status = 'signOut';
                console.log("rejected",state,action);
            });
    },
});

export const {signOut} = userSlice.actions;
export default userSlice.reducer;