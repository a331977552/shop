import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';
import {RootState, AppThunk} from '../store';
import loginAPI from "../../http/UserRestAPI";
import UserModel from "../../model/UserModel";

const initialState: UserModel = {
    status: 'signOut',
};

export const login = createAsyncThunk(
    'user/login',
    async (user: { username: string, password: string }) => {
        const response = await loginAPI(user);
        // The value we return becomes the `fulfilled` action payload
        console.log(response);
        return response.result;
    }
);


export const userSlice = createSlice({
    name: 'user',
    initialState,
    reducers: {
        signOut: (state) => {
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(login.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(login.fulfilled, (state, action) => {
                state.status = 'loginIn';
                console.log(state);
            })
            .addCase(login.rejected, (state, action) => {
                state.status = 'signOut';
                console.log(state);

            });
    },
});

export const {signOut} = userSlice.actions;
export default userSlice.reducer;