import {
    createAsyncThunk,
    createSlice
} from '@reduxjs/toolkit';
import loginAPI, {getUserInfoAPI} from "../../http/UserRestAPI";
import TokenModel from "../../model/TokenModel";
import ResultModel from "../../model/ResultModel";
import AuthenticationModel from "../../model/AuthenticationModel";
import {ErrorModel} from "../../model/ErrorModel";
import {RootState} from "../store";
import UserModel from '../../model/UserModel';
import {BaseModel} from "../../model/BaseModel";
interface Model{
    token:TokenModel;
    user?:UserModel;
    userStatus:BaseModel
}
const initialState:Model = {
    userStatus: {status:'finished'},
    token:{status:"finished"}
};


export const login = createAsyncThunk<ResultModel<string>, AuthenticationModel, ErrorModel>
(
    'user/login',
    async (user: { username: string, password: string }, {rejectWithValue}) => {
        try {
            return await loginAPI(user);
        } catch (errorResult) {
            return rejectWithValue(errorResult);
        }
    },
);

export const getUserInfo = createAsyncThunk<ResultModel<UserModel>, {}, ErrorModel>
(
    'user/get',
    async ({}, {rejectWithValue}) => {
        try {
            return await getUserInfoAPI();
        } catch (errorResult) {
            return rejectWithValue(errorResult);
        }
    },
);


export const selectUser = (state: RootState) => state.userReducer.user;





export const userSlice = createSlice({
    name: 'user',
    initialState,
    reducers: {
        signOut: (state) => {
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(login.pending, (state, action) => {
                state.token.status = 'loading';
            })
            .addCase(login.fulfilled, (state, action) => {
                state.token = {token: action.payload.result,status:'finished'};
            })
            .addCase(login.rejected, (state, action) => {
                state.token.status = 'failed';
                state.token.errorMsg=action.payload?.msgDetail;
            })
            .addCase(getUserInfo.pending, (state, action) => {
                state.userStatus.status = 'loading';
            })
            .addCase(getUserInfo.fulfilled, (state, action) => {
                state.userStatus.status = 'finished';
                console.log(action.payload.result)
                state.user = action.payload.result;
            })
            .addCase(getUserInfo.rejected, (state, action) => {
                state.userStatus.status = 'failed';
                state.userStatus.errorMsg = action.payload?.msgDetail;
            })
    },
});
export const {signOut} = userSlice.actions;
export default userSlice.reducer;
